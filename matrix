#include <iostream>
#include <cmath>

using namespace std;


void swapRows(double** matrix, int row1, int row2, int n) {
    for (int i = 0; i < n; i++) {
        double temp = matrix[row1][i];
        matrix[row1][i] = matrix[row2][i];
        matrix[row2][i] = temp;
    }
}


void gaussianElimination(double** matrix, int n) {
    for (int i = 0; i < n; i++) {
        
        int pivotRow = i;
        for (int j = i + 1; j < n; j++) {
            if (abs(matrix[j][i]) > abs(matrix[pivotRow][i])) {
                pivotRow = j;
            }
        }

       
        if (i != pivotRow) {
            swapRows(matrix, i, pivotRow, n);
        }

        
        for (int j = i + 1; j < n; j++) {
            double factor = matrix[j][i] / matrix[i][i];
            for (int k = i; k < n; k++) {
                matrix[j][k] -= factor * matrix[i][k];
            }
        }
    }
}


double calculateDeterminantFromUpperTriangular(double** matrix, int n) {
    double determinant = 1.0;
    for (int i = 0; i < n; i++) {
        determinant *= matrix[i][i];
    }
    return determinant;
}

int main() {
    int n;
    cout << "Introduceti dimensiunea matricei: ";
    cin >> n;


    double** matrix = new double*[n];
    for (int i = 0; i < n; i++) {
        matrix[i] = new double[n];
        cout << "Introduceti elementele randului " << i + 1 << " (separate prin spaÈ›iu): ";
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    
    gaussianElimination(matrix, n);

    
    double determinant = calculateDeterminantFromUpperTriangular(matrix, n);
    cout << "Determinantul matricei este: " << determinant << endl;

    for (int i = 0; i < n; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}
